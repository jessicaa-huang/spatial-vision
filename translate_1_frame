{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6hR3bk7ZYS9U"
      },
      "outputs": [],
      "source": [
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# grabs Euler rotation values from txt file, returns array [angle x, angle y, angle z]\n",
        "def grabRotationValues(txtfile):\n",
        "  # read in file's content\n",
        "  file = open(txtfile, \"r\")\n",
        "  contentArr = []\n",
        "\n",
        "  while True:\n",
        "    content = file.readline()\n",
        "    contentArr.append(content.split(\"#\"))\n",
        "    if not content:\n",
        "      break\n",
        "\n",
        "  rMatrix = []\n",
        "  # split 3 x,y,z values for rotation\n",
        "  for i in range(1, len(contentArr) - 1):\n",
        "    rMatrix.append((contentArr[i][2].split(\",\")))\n",
        "\n",
        "  for j in range(len(rMatrix)):\n",
        "    for m in range(3):\n",
        "      rMatrix[j][m] = float(rMatrix[j][m])\n",
        "\n",
        "  return rMatrix"
      ],
      "metadata": {
        "id": "zbsO2kKFxdtB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# grabs camera translation from txtfile and returns [x,y,z]\n",
        "def makeCameraTranslation(txtfile):\n",
        "  # read in file's content\n",
        "  file = open(txtfile, \"r\")\n",
        "  contentArr = []\n",
        "\n",
        "  while True:\n",
        "    content = file.readline()\n",
        "    contentArr.append(content.split(\"#\"))\n",
        "    if not content:\n",
        "      break\n",
        "\n",
        "  # make Camera Translation matrix\n",
        "  camTranslation = []\n",
        "\n",
        "  # split 3 x,y,z values for translation & rotation\n",
        "  for i in range(1, len(contentArr) - 1):\n",
        "    camTranslation.append((contentArr[i][1].split(\",\")))\n",
        "\n",
        "  for j in range(len(camTranslation)):\n",
        "    for m in range(3):\n",
        "      camTranslation[j][m] = float(camTranslation[j][m])\n",
        "\n",
        "  return camTranslation"
      ],
      "metadata": {
        "id": "DyRAFEe749x1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def worldToCam(rotationMatrix, cameraTranslation, pWorld):\n",
        "  cameraToWorld = np.zeros((4,4))\n",
        "  lastColumn = [0,0,0,1]\n",
        "\n",
        "  for i in range(3):\n",
        "    for j in range(3):\n",
        "        cameraToWorld[i][j] = rotationMatrix[i][j]\n",
        "    cameraToWorld[3][i] = cameraTranslation[i]\n",
        "\n",
        "  for m in range(4):\n",
        "      cameraToWorld[m][3] = lastColumn[m]\n",
        "\n",
        "  worldToCamera = np.linalg.inv(cameraToWorld)\n",
        "  pCamera = np.matmul(pWorld, worldToCamera)\n",
        "  print(\"PCamera is \", pCamera)\n",
        "\n",
        "  pScreen = np.zeros((1,2))\n",
        "  pScreen[0][0] = pCamera[0] / -pCamera[2]\n",
        "  pScreen[0][1] = pCamera[1] / -pCamera[2]\n",
        "  return pScreen"
      ],
      "metadata": {
        "id": "aS8-yLn1w9Ug"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def eulerToRotation(x, y, z):\n",
        "  \"\"\" x is the Euler x-angle, often notated as psi\n",
        "      y is the Euler y-angle, often notated as theta\n",
        "      z is the Euler z-angle, often notated as phi\n",
        "      all angles are in radians\n",
        "      math from https://eecs.qmul.ac.uk/~gslabaugh/publications/euler.pdf\n",
        "  \"\"\"\n",
        "  import math\n",
        "  import numpy as np\n",
        "  Rx = [[1, 0, 0],\n",
        "        [0, math.cos(x), -math.sin(x)],\n",
        "        [0, math.sin(x), math.cos(x)]]\n",
        "\n",
        "  Ry = [[math.cos(y), 0, math.sin(y)],\n",
        "        [0, 1, 0],\n",
        "        [-math.sin(y), 0, math.cos(y)]]\n",
        "\n",
        "  Rz = [[math.cos(z), -math.sin(z), 0],\n",
        "        [math.sin(z), math.cos(z), 0],\n",
        "        [0, 0, 1]]\n",
        "\n",
        "  rotMatrix = np.matmul((np.matmul(Rx, Ry)), Rz)\n",
        "\n",
        "  return rotMatrix"
      ],
      "metadata": {
        "id": "s0Deeo2i7FXV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def main():\n",
        "  # filename = \"cam_position.txt\"\n",
        "  # camTranslation = makeCameraTranslation(filename)\n",
        "  # eulerRotation = grabRotationValues(filename)\n",
        "\n",
        "  # print(camTranslation[0])\n",
        "  # print(eulerRotation[0])\n",
        "\n",
        "  # rotMatrix = eulerToRotation(eulerRotation[0][0], eulerRotation[0][1], eulerRotation[0][2])\n",
        "  # print(rotMatrix)\n",
        "\n",
        "  # pWorld is coordinate of main object in world view\n",
        "  # pWorld currently hardcoded\n",
        "  pWorld = [-0.31,1.44,-2.49, 1]\n",
        "\n",
        "  # eventually need to run worldToCam on every frame, indexing through camTranslation\n",
        "\n",
        "  rotMatrix = [[0.718762, 0.615033, -0.324214], [-0.393932, 0.744416, 0.539277], [0.573024, -0.259959, 0.777216]]\n",
        "  camTranslation = [0.526967, 1.254234, -2.532150]\n",
        "\n",
        "  pScreen = worldToCam(rotMatrix, camTranslation, pWorld)\n",
        "\n",
        "  # pScreen = worldToCam(rotMatrix, camTranslation[0], pWorld)\n",
        "  print(pScreen)"
      ],
      "metadata": {
        "id": "ey3f4nar2aj9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pSnhivWh-X_D",
        "outputId": "81b60e06-43fd-46a6-9d6f-1780b719a787"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PCamera is  [-0.50092313  0.49051932 -0.4950774   1.        ]\n",
            "[[-1.0118077   0.99079319]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# hard coded from Frame 1's euler angles (radians) -> Rotation matrix using online calc\n",
        "# rotationMatrix = [[0.0007, -0.999, 0], [-0.247, 0, -0.969], [0.969, 0, -0.246]]\n",
        "# cameraTranslation = [5.773, 1.69, -0.59]\n",
        "\n",
        "# hard coded from scratchapixel tutorial to check Pworld -> Pcamera/local gives [-0.5, 0.5, -0.5]\n",
        "# rotationMatrix = [[0.718762, 0.615033, -0.324214], [-0.393932, 0.744416, 0.539277], [0.573024, -0.259959, 0.777216]]\n",
        "# cameraTranslation = [0.526967, 1.254234, -2.532150]\n",
        "\n",
        "# pWorld = [-0.31,1.44,-2.49, 1]"
      ],
      "metadata": {
        "id": "QnxyzGfdh2V7"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
